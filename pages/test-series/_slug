<template>
  <div>
    <main class="pb-8">
      <div class="max-w-3xl px-4 mx-auto sm:px-6 lg:max-w-7xl lg:px-8">
        <h1 class="sr-only">{{ product[0].details.name }}</h1>
        <!-- Main 2 column grid -->
        <div class="grid items-start grid-cols-1 gap-4 md:grid-cols-2 md:gap-8">
          <!-- Left column -->
          <div class="grid grid-cols-1 gap-4 p-2 border border-red-500">
            <ProductsHero :product="product[0]"/>
          </div>

          <!-- Right column -->
          <div class="grid grid-cols-1 gap-4 p-2 border border-blue-500">
            <ProductsDetails :product="product[0]" />
          </div>

          <!-- RELATED PRODUCTS -->
          <div
            class="grid grid-cols-1 gap-4 p-2 border border-green-500 md:col-span-2"
          >
            <ProductsRelatedProducts
              :options="options"
              :relatedProducts="relatedProducts"
            />
            <!-- :relatedProducts="relatedProducts" -->
          </div>
        </div>
      </div>
    </main>
  </div>
</template>

<script>
export default {
  watch: {
    // whenever question changes, this function will run
    checkedproductCategory: async function(
      newCheckedproductCategory,
      oldCheckedproductCategory
    ) {
      // console.log(newCheckedproductCategory)
      this.relatedProducts = await this.$content("products")
        .where({
          sku: { $in: this.product[0].isRelatedTo },
          productCategory: newCheckedproductCategory
        })
        .only([
          "sku",
          "isAccessoryOrSparePartFor",
          "details",
          "toolType",
          "productCategory",
          "productType",
          "tags",
          "inProductGroupWithID",
          "isRelatedTo"
        ])
        .fetch();
    }
  },
  async asyncData({ params, $content }) {
    const slug = params.slug; // When calling /abc the slug will be "abc"
    const product = await $content("products")
      .where({ slugForUrl: slug })
      .fetch();

    const relatedProducts = await $content("products")
      .where({ sku: { $in: product[0].isRelatedTo } })
      .fetch();

    const options = relatedProducts
      .map(item => item.productCategory)
      .filter((value, index, self) => self.indexOf(value) === index);

    return {
      product: product,
      relatedProducts: relatedProducts,
      options: options,
      checkedproductCategory: []
    };
  }
};
</script>
